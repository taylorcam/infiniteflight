/*
 * Script for diving a large apt.dat into smaller files
 * Sorts by region
 * By Cameron Carmichael Alonso
*/

using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

namespace AirportParser
{
	public static class AptDivider
	{

		//ENTER REGION INFO BEFORE RUNNING SCRIPT
		static float LatMin = 18.0f;
		static float LatMax = 22.0f;
		static float LonMin = -159.0f;
		static float LonMax = -154.0f;
		static string RegionName = "Hawaii";

		static public string BasePath = "/Users/Cameron/InfiniteFlight/Airports/";
		static public string MDat = "/Users/Cameron/InfiniteFlight/Airports/apt.mdat";

		public static void AptDividerFunction () {

			string[] data = System.IO.File.ReadAllLines( @"/Users/Cameron/InfiniteFlight/Airports/apt.mdat"); //replace dir with location of clone of github.com/carmichaelalonso/infiniteflight


			for (int i = 0; i < data.Length; i++)
			{
				string line = data [i];

				if (line.StartsWith("1 ")) {
					//found start of def

					Console.Write ("Found airport: " + line);

					for (int y = (i + 1); y < data.Length; y++) {

						//search for final line

						string endLine = data [y];

						if (endLine.StartsWith ("1 ")) {
							//found end line


							string[] Airport = new List<string> (data).GetRange (i, (y-i)).ToArray ();

							foreach (string obj in Airport) {
								//Console.WriteLine(obj);
							}
								
							Console.WriteLine ("Difference: " + (y-i) + " | current-y = " + y + " first-i = " + i);

							//check region location and create files
							RegionRelationChecker (Airport);

							Console.WriteLine ("\n \n");
							Airport = null;
							break;
						}

					}


				}


			}

		}


		//check region
		public static void RegionRelationChecker (string[] Airport) {

			string FirstLine = Airport [0];
			string Runway = "";

			//find a runway, any runway - to get lat/lng
			for (int i = 0; i < Airport.Length; i++) {
				string line = Airport [i];

				if (line.StartsWith ("100 ")) {
					//found a runway - set value and break
					Runway = line;
					break;

				}

			}

			string OrigLat = Runway.Substring (35, 12);
			string OrigLng = Runway.Substring (48, 12);

			float Latitude = float.Parse(OrigLat.Trim(), CultureInfo.InvariantCulture.NumberFormat);
			float Longitude = float.Parse(OrigLng.Trim(), CultureInfo.InvariantCulture.NumberFormat);
			string ICAO = FirstLine.Substring (15, 4);

			Console.WriteLine (ICAO + " at " + Latitude + ", " + Longitude);

			if ((Latitude <= LatMax) && (Latitude >= LatMin) && (Longitude <= LonMax) && (Longitude >= LonMin)) {
				//airport is within current region
				Console.WriteLine ("Is in region");
				SaveAirportInRepo (ICAO, Latitude, Longitude, Airport);

			}


		}

		//save airport to file
		public static void SaveAirportInRepo(string ICAO, float Latitude, float Longitude, string[] Airport) {

			//check if region folder exists
			string DirectoryPathRegion = (BasePath + RegionName);
			if(!Directory.Exists(DirectoryPathRegion))
			{
				Directory.CreateDirectory(DirectoryPathRegion);
			}

			//check if ICAO folder exists
			string DirectoryPathAirport = (DirectoryPathRegion + "/" + ICAO);
			if(!Directory.Exists(DirectoryPathAirport))
			{
				Directory.CreateDirectory(DirectoryPathAirport);
			}

			List<string> NewAirport = new List<string>(); 

			NewAirport.Add("A"); //created on Mac
			NewAirport.Add("1000 Generated by InfiniteFlight-AirportParser"); //keep 1000 bit, marks version. Rest is to show off this class ;)
			NewAirport.Add(""); //blank line for spacing

			//run a for loop and assign +3 to compensate for header
			for (int i = 0; i < Airport.Length; i++) {

				NewAirport.Add(Airport [i])
				;

			}

			string DirectoryToSave = (DirectoryPathAirport + "/apt.dat");

			//write to file
			System.IO.File.WriteAllLines(DirectoryToSave, NewAirport);

		}

	}
}

